# -*- coding: utf-8 -*-
"""02-712/02-512 Final Project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CV37jqR1X2-QpeAZyG5P6ilhKnWtaYes
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.lines as mlines
import math

"""# Parameters and Values"""

r = 0.2
Smax = 3000
d1 = 0 #15  #1.5
d2 = 0 #0.07
d3 = 0
d4 = 0.05
d5 = 0.05# 0.00001
b1 = 0.1
b2 = 0.3
o1 = 12.13
o2 = 30
o3 = 0.0001
o4 = 0.0001
k1 = 0
k2 = 0.001
T50 = 100
kA = 0.1

"""# Simulation of Model"""

# function f1

# Logistic Tumor growth

def logTumor(S, Smax, r):

  value = r * S * (1 - (S/Smax))

  return value

# Logistic Tumor Growth Stochastic

def logTumorStoch(S, Smax, r):
  if S < 0 :
    return 0
  else:

    S = np.random.poisson(S)
    value = r * S * (1 - (S/Smax))
    return value

# function f1
# Exponential Tumor growth

def expTumor(S, r):

  value =  S*r

  return value

# Exponential Tumor Growth Stochastic

def expTumorStoch(S, r):
  if S < 0:
    return 0
  else:

    S = np.random.poisson(S)
    value =  float(S)*r
    return value

# function f1
# Gompertz Tumor growth

def gompertzTumor(S, r):

  value =  r * S *np.log(Smax/S)

  return value

# Gompertz Tumor Growth Stochastic

def gompertzTumorStoch(S, r):

  if S < 1 :
    return 0
  else:
    S = np.random.poisson(S)
    if int(S) < 0:
      return 0
    else:
      value =  r * S *np.log(Smax/S)

      return value

# function f2

def tumorDeath(S,T,C,d1,d2,d3,T50,k1):

  value = (d1*T*S)/(T50+T) + (d2*S*C) + ((d3*S)/(1 + k1 * T))

  return value

# not required
def tumorDeathStoch(S,T,C,d1,d2,d3,T50,k1):
  S = np.random.poisson(S)
  value = (d1*T*S)/(T50+T) + (d2*S*C) + ((d3*S)/(1 + k1 * T))

  return value

# function f3

def activation(S,T,I,C,b1,b2,o1,tumorDeathValue,k2):

  numerator = (b1 + b2 * I)*S + o1*tumorDeathValue*T
  denominator = 1 + k2 *C *S

  return numerator/denominator

# function f4

def inactivation(S,T,C,o2,d1, d4,d5,T50):
  value = (o2*(d1*T*S)/(T50+T)) + d4*T*C + d5*T
  return value

# function f5

def immunotherapy(S, I, C, o3, b2, k2):
  return o3*((b2*I*S)/(1+k2*C*S))

# fucntion f6

def radiotherapy(S,C,o4, d2):
  return S*C*o4*d2

#angiogenesis

def angioTumor(r, S, E):
  return r * S * (1 - S/E)

def dEdt(kA, E):
  if E > 0 :
    value = math.sqrt(E)
  else:
    value = 0.00000000000000001
  return kA * value

def angioTumorStoch(r, S, E):

  if E or S < 0 :
    return 0
  else:
    S = np.random.poisson(S)
    return r * S * (1 - S/E)

def dEdtStoch(kA, E):

  if E < 0 :
    return 0
  else:
    S = np.random.poisson(E)

    return kA * math.sqrt(E)

# run simulation of the model

def simulation(S,I,T,C,r,Smax,d1,d2,d3,d4,d5,b1,b2,o1,o2,o3,o4,k1,k2,T50, time, step):
  r = r
  rLog = r
  rExp = r
  rGom = r
  rAng = r

  tumorSizeLogList = []
  tumorSizeExpList = []
  tumorSizeGomList = []
  tumorSizeAngList = []

  tCellLogList = []
  tCellExpList = []
  tCellGomList = []
  tCellAngList = []

  iLogList = []
  iExpList = []
  iGomList = []
  iAngList = []

  cLogList = []
  cExpList = []
  cGomList = []
  cAngList = []

  initTumorLogSize = S
  initTumorExpSize = S
  initTumorGomSize = S
  initTumorAngSize = S

  initTCellLog = T
  initTCellExp = T
  initTCellGom = T
  initTCellAng = T

  initImmunoAgentLog = I
  initImmunoAgentExp = I
  initImmunoAgentGom = I
  initImmunoAgentAng = I

  initRadioActivityLog = C
  initRadioActivityExp = C
  initRadioActivityGom = C
  initRadioActivityAng = C

  tumorSizeLogList.append(initTumorLogSize)
  tumorSizeExpList.append(initTumorExpSize)
  tumorSizeGomList.append(initTumorGomSize)
  tumorSizeAngList.append(initTumorAngSize)

  iLogList.append(initImmunoAgentLog )
  iExpList.append(initImmunoAgentExp)
  iGomList.append(initImmunoAgentGom)
  iAngList.append(initImmunoAgentAng)

  tCellLogList.append(initTCellLog)
  tCellExpList.append(initTCellExp)
  tCellGomList.append(initTCellGom)
  tCellAngList.append(initTCellAng)

  cLogList.append(initRadioActivityLog)
  cExpList.append(initRadioActivityExp)
  cGomList.append(initRadioActivityGom)
  cAngList.append(initRadioActivityAng)

  while time > 0:
    growthLog = logTumor(initTumorLogSize, Smax, rLog)
    growthExp = expTumor(initTumorExpSize ,rExp )
    growthGom = gompertzTumor(initTumorGomSize, rGom)
    E = dEdt(0.2, initTumorAngSize)
    growthAng = angioTumor(initTumorAngSize, rAng,E)

    deathLog = tumorDeath(initTumorLogSize,initTCellLog,initImmunoAgentLog,d1,d2,d3,T50,k1)
    deathExp = tumorDeath(initTumorExpSize,initTCellExp,initImmunoAgentExp,d1,d2,d3,T50,k1)
    deathGom = tumorDeath(initTumorGomSize,initTCellGom,initImmunoAgentGom,d1,d2,d3,T50,k1)
    deathAng = tumorDeath(initTumorAngSize,initTCellAng,initImmunoAgentAng,d1,d2,d3,T50,k1)

    newTumorSizeLog = initTumorLogSize + (growthLog - deathLog)*step
    newTumorSizeExp = initTumorExpSize + (growthExp - deathExp)*step
    newTumorSizeGom = initTumorGomSize + (growthGom -deathGom)*step
    newTumorSizeAng = initTumorAngSize + (growthAng -deathAng)*step

    tCellActivationLog = activation(initTumorLogSize,initTCellLog,initImmunoAgentLog,initRadioActivityLog,b1,b2,o1,deathLog,k2)
    tCellInactivationLog = inactivation(initTumorLogSize,initTCellLog,initRadioActivityLog,o2,d1, d4,d5,T50)
    newTCellLog = initTCellLog + (tCellActivationLog - tCellInactivationLog)*step

    tCellActivationExp = activation(initTumorExpSize,initTCellExp,initImmunoAgentExp,initRadioActivityExp,b1,b2,o1,deathExp,k2)
    tCellInactivationExp = inactivation(initTumorExpSize,initTCellExp,initRadioActivityExp,o2,d1, d4,d5,T50)
    newTCellExp = initTCellExp + (tCellActivationExp - tCellInactivationExp)*step

    tCellActivationGom = activation(initTumorGomSize,initTCellGom,initImmunoAgentGom,initRadioActivityGom,b1,b2,o1,deathGom,k2)
    tCellInactivationGom = inactivation(initTumorGomSize,initTCellGom,initRadioActivityGom,o2,d1, d4,d5,T50)
    newTCellGom = initTCellGom + (tCellActivationGom - tCellInactivationGom)*step

    tCellActivationAng = activation(initTumorAngSize,initTCellAng,initImmunoAgentAng,initRadioActivityAng,b1,b2,o1,deathAng,k2)
    tCellInactivationAng = inactivation(initTumorAngSize,initTCellAng,initRadioActivityAng,o2,d1, d4,d5,T50)
    newTCellAng = initTCellAng + (tCellActivationAng - tCellInactivationAng)*step

    newImmunoAgentLog = initImmunoAgentLog - immunotherapy(initTumorLogSize, initImmunoAgentLog, initRadioActivityLog, o3, b2, k2)*step
    newRadioActivityLog = initRadioActivityLog - radiotherapy(initTumorLogSize,initRadioActivityLog,o4, d2)*step

    newImmunoAgentExp = initImmunoAgentExp - immunotherapy(initTumorExpSize, initImmunoAgentExp, initRadioActivityExp, o3, b2, k2)*step
    newRadioActivityExp = initRadioActivityExp - radiotherapy(initTumorExpSize,initRadioActivityExp,o4, d2)*step

    newImmunoAgentGom = initImmunoAgentGom - immunotherapy(initTumorGomSize, initImmunoAgentGom, initRadioActivityGom, o3, b2, k2)*step
    newRadioActivityGom = initRadioActivityGom - radiotherapy(initTumorGomSize,initRadioActivityGom,o4, d2)*step

    newImmunoAgentAng = initImmunoAgentAng - immunotherapy(initTumorAngSize, initImmunoAgentAng, initRadioActivityAng, o3, b2, k2)*step
    newRadioActivityAng = initRadioActivityAng - radiotherapy(initTumorAngSize,initRadioActivityAng,o4, d2)*step

    initTumorLogSize = newTumorSizeLog
    initTumorExpSize = newTumorSizeExp
    initTumorGomSize = newTumorSizeGom
    initTumorAngSize = newTumorSizeAng

    initTCellLog = newTCellLog
    initTCellExp = newTCellExp
    initTCellGom = newTCellGom
    initTCellAng = newTCellAng


    initImmunoAgentLog = newImmunoAgentLog
    initImmunoAgentExp = newImmunoAgentExp
    initImmunoAgentGom = newImmunoAgentGom
    initImmunoAgentAng = newImmunoAgentAng

    initRadioActivityLog = newRadioActivityLog
    initRadioActivityExp = newRadioActivityExp
    initRadioActivityGom = newRadioActivityGom
    initRadioActivityAng = newRadioActivityAng

    tumorSizeLogList.append(initTumorLogSize)
    tumorSizeExpList.append(initTumorExpSize)
    tumorSizeGomList.append(initTumorGomSize)
    tumorSizeAngList.append(initTumorAngSize)


    tCellLogList.append(initTCellLog)
    tCellExpList.append(initTCellExp)
    tCellGomList.append(initTCellGom)
    tCellAngList.append(initTCellAng)

    iLogList.append(initImmunoAgentLog )
    iExpList.append(initImmunoAgentExp)
    iGomList.append(initImmunoAgentGom)
    iAngList.append(initImmunoAgentAng)

    cLogList.append(initRadioActivityLog)
    cExpList.append(initRadioActivityExp)
    cGomList.append(initRadioActivityGom)
    cAngList.append(initRadioActivityAng)



    time -= step

  return (tumorSizeLogList,tumorSizeExpList,tumorSizeGomList,tumorSizeAngList ,tCellLogList,tCellExpList,tCellGomList, tCellAngList ,iLogList,iExpList, iGomList,iAngList, cLogList, cExpList,cGomList, cAngList)



"""# No Treatment for all 3 growth models"""

step = 0.1
time = 35
S = 9
T = 0
I = 0
C = 0
logTumorL, expTumorL, gomTumorL, angTumorL,logTCellL,expTCellL, gomTCellL,angTCellL, LogIL, ExpIL, GomIL,AngIL,LogCL, ExpCL, GomCL, AngCL = simulation(S,I,T,C,r,Smax,d1,d2,d3,d4,d5,b1,b2,o1,o2,o3,o4,k1,k2,T50, time, step)

print(gomTumorL)

# plot Logistic, Exp, Gompertx, Angio tumor models with no treatment on one plot



y = [i for i in range(len(logTumorL))]



fig, (ax1,ax2,ax3,ax4)= plt.subplots(4, 1)

ax1.plot( y,logTumorL, 'C1.', linestyle = '-')
ax2.plot(y, expTumorL, 'C2.',linestyle = '-')
ax3.plot(y, gomTumorL, 'C3.',linestyle = '-')
ax4.plot(y, angTumorL, 'C4.',linestyle = '-')
ax1.set_title('Tumor Growth Logistic (No Treatment)')
ax2.set_title('Tumor Growth Expo (No Treatment)')
ax3.set_title('Tumor Growth Gompertz (No Treatment)')
ax4.set_title('Tumor Growth Angiogenesis (No Treatment)')



fig.tight_layout()



"""# With Immunotherapy for all 3 growth models"""

step = 0.01
time = 5
S = 9
T = 0
I = 2
C = 0
d1 = 1
d2 = 0.07
d3 = 0
logTumorL, expTumorL, gomTumorL, angTumorL, logTCellL,expTCellL, gomTCellL,angTCellL, LogIL, ExpIL, GomIL,AngIL, LogCL, ExpCL, GomCL ,AngCL= simulation(S,I,T,C,r,Smax,d1,d2,d3,d4,d5,b1,b2,o1,o2,o3,o4,k1,k2,T50, time, step)

# plot 3 tumor models with immunotherapy



y = [i for i in range(len(logTumorL))]



fig, ((ax1, ax2,ax3,ax4), (ax5, ax6,ax7,ax8), (ax9,ax10,ax11, ax12))= plt.subplots(3, 4)

ax1.plot( y,logTumorL, 'C1.', linestyle = '-')
ax2.plot(y, expTumorL, 'C1.',linestyle = '-')
ax3.plot(y, gomTumorL, 'C1.',linestyle = '-')
ax4.plot(y, angTumorL, 'C1.',linestyle = '-')
ax1.set_title('Logistic')
ax2.set_title('Expo')
ax3.set_title('Gompertz')
ax4.set_title('Angiogenesis')

ax5.plot(y, LogIL,'C2.', linestyle = '-')
ax6.plot(y, ExpIL,'C2.', linestyle = '-')
ax7.plot(y, GomIL,'C2.', linestyle = '-')
ax8.plot(y, AngIL,'C2.', linestyle = '-')
ax5.set_title('IC(Logistic)')
ax6.set_title('IC(Exponential)')
ax7.set_title('IC(Gompertz)')
ax8.set_title('IC(Angiogenesis)')

ax9.plot( y, logTCellL, 'C3.', linestyle = '-')
ax10.plot(y, expTCellL, 'C3.',linestyle = '-')
ax11.plot(y, gomTCellL, 'C3.',linestyle = '-')
ax12.plot(y, angTCellL, 'C3.',linestyle = '-')
ax9.set_title('T Cell Logistic')
ax10.set_title('T Cell Expo')
ax11.set_title('T Cell Gompertz')
ax12.set_title('T Cell Angiogenesis')

fig.tight_layout()

"""# Simulating Graphs for varying Immunotherapy dose"""

step = 0.01
time = 5
S = 1
T = 0
# I = 1
C = 0
d1 = 1
d2 = 0.07
d3 = 0
fig, ((ax1, ax2,ax3,ax4), (ax5, ax6,ax7,ax8), (ax9,ax10,ax11,ax12))= plt.subplots(3, 4)

for i in range(0, 11, 1):
  I = i/10
  logTumorL, expTumorL, gomTumorL,angTumorL, logTCellL,expTCellL, gomTCellL, angTCellL,LogIL, ExpIL, GomIL,AngIL,LogCL, ExpCL, GomCL , AngCL= simulation(S,I,T,C,r,Smax,d1,d2,d3,d4,d5,b1,b2,o1,o2,o3,o4,k1,k2,T50, time, step)

  y = [i for i in range(len(logTumorL))]


  ax1.plot(y, logTumorL,  linestyle = '-',label=f"{I}")
  ax2.plot(y, expTumorL, linestyle = '-',label=f"{I}")
  ax3.plot(y, gomTumorL, linestyle = '-',label=f"{I}")
  ax4.plot(y, angTumorL, linestyle = '-',label=f"{I}")

  ax5.plot(y, LogIL, linestyle = '-',label=f"{I}")
  ax6.plot(y, ExpIL, linestyle = '-',label=f"{I}")
  ax7.plot(y, GomIL, linestyle = '-',label=f"{I}")
  ax8.plot(y, AngIL, linestyle = '-',label=f"{I}")

  ax9.plot( y,logTCellL,  linestyle = '-',label=f"{I}")
  ax10.plot(y, expTCellL, linestyle = '-',label=f"{I}")
  ax11.plot(y, gomTCellL, linestyle = '-',label=f"{I}")
  ax12.plot(y, angTCellL, linestyle = '-',label=f"{I}")




ax1.set_title('Logistic')
ax2.set_title('Expo')
ax3.set_title('Gompertz')
ax4.set_title('Angiogenesis')
ax5.set_title('IC(Logistic)')
ax6.set_title('IC(Exponential)')
ax7.set_title('IC(Gompertz)')
ax8.set_title('IC(Angiogenesis)')
ax9.set_title('T Cell Logistic')
ax10.set_title('T Cell Expo')
ax11.set_title('T Cell Gompertz')
ax12.set_title('T Cell Angiogenesis')
# ax1.legend()
# ax2.legend()
# ax3.legend()
# ax4.legend()
# ax5.legend()
# ax6.legend()
# ax7.legend()
# ax8.legend()
# ax9.legend()

fig.tight_layout()

"""# Simulating Graphs for varying Radiotherapy"""

# Simulating Graphs for varying C

step = 0.01
time = 5
S = 9
T = 0
I = 0
# C = 0
d1 = 1
d2 = 100
d3 = 0
fig, ((ax1, ax2,ax3,ax4), (ax9,ax10,ax11,ax12),(ax13,ax14,ax15,ax16), (ax5, ax6,ax7,ax8))= plt.subplots(4, 4)

for i in range(0, 11, 1):
  C = i/10
  logTumorL, expTumorL, gomTumorL,angTumorL, logTCellL,expTCellL, gomTCellL, angTCellL,LogIL, ExpIL, GomIL,AngIL,LogCL, ExpCL, GomCL , AngCL = simulation(S,I,T,C,r,Smax,d1,d2,d3,d4,d5,b1,b2,o1,o2,o3,o4,k1,k2,T50, time, step)

  y = [i for i in range(len(logTumorL))]

  ax1.plot(y, logTumorL,  linestyle = '-',label=f"{I}")
  ax2.plot(y, expTumorL, linestyle = '-',label=f"{I}")
  ax3.plot(y, gomTumorL, linestyle = '-',label=f"{I}")
  ax4.plot(y, angTumorL, linestyle = '-',label=f"{I}")


  ax9.plot( y,logTCellL,  linestyle = '-',label=f"{I}")
  ax10.plot(y, expTCellL, linestyle = '-',label=f"{I}")
  ax11.plot(y, gomTCellL, linestyle = '-',label=f"{I}")
  ax12.plot(y, angTCellL, linestyle = '-',label=f"{I}")

  ax13.plot( y,LogCL,  linestyle = '-',label=f"{I}")
  ax14.plot(y, ExpCL, linestyle = '-',label=f"{I}")
  ax15.plot(y, GomCL, linestyle = '-',label=f"{I}")
  ax16.plot(y, AngCL, linestyle = '-',label=f"{I}")


  ax5.plot(y, LogIL, linestyle = '-',label=f"{I}")
  ax6.plot(y, ExpIL, linestyle = '-',label=f"{I}")
  ax7.plot(y, GomIL, linestyle = '-',label=f"{I}")
  ax8.plot(y, AngIL, linestyle = '-',label=f"{I}")


ax1.set_title('Logistic')
ax2.set_title('Expo')
ax3.set_title('Gompertz')
ax4.set_title('Angiogenesis')
ax5.set_title('IC(Logistic)')
ax6.set_title('IC(Exponential)')
ax7.set_title('IC(Gompertz)')
ax8.set_title('IC(Angiogenesis)')
ax9.set_title('T Cell Logistic')
ax10.set_title('T Cell Expo')
ax11.set_title('T Cell Gompertz')
ax12.set_title('T Cell Angiogenesis')
ax13.set_title('RadioActivity')
ax14.set_title('RadioActivity')
ax15.set_title('RadioActivity')
ax16.set_title('RadioActivity')


fig.tight_layout()

"""# Simulating Graphs for varying Radiotherapy and Immunotherapy together"""

step = 0.1
time = 2
S = 9
T = 0
# I = 0
# C = 0
d1 = 1
d2 = 10
d3 = 0
fig, ((ax1, ax2,ax3,ax4), (ax9,ax10,ax11,ax12),(ax13,ax14,ax15,ax16), (ax5, ax6,ax7,ax8))= plt.subplots(4, 4)

for i in range(0, 11, 1):
    C = i/10
  #for j in range(0,11,1):
    I = i/10
    logTumorL, expTumorL, gomTumorL,angTumorL, logTCellL,expTCellL, gomTCellL, angTCellL,LogIL, ExpIL, GomIL,AngIL,LogCL, ExpCL, GomCL , AngCL = simulation(S,I,T,C,r,Smax,d1,d2,d3,d4,d5,b1,b2,o1,o2,o3,o4,k1,k2,T50, time, step)

    y = [i for i in range(len(logTumorL))]


    ax1.plot(y, logTumorL,  linestyle = '-',label=f"I={I}, C={C}")
    ax2.plot(y, expTumorL, linestyle = '-',label=f"I={I}, C={C}")
    ax3.plot(y, gomTumorL, linestyle = '-',label=f"I={I}, C={C}")
    ax4.plot(y, angTumorL, linestyle = '-',label=f"I={I}, C={C}")

    ax5.plot(y, LogIL, linestyle = '-',label=f"I={I}, C={C}")
    ax6.plot(y, ExpIL, linestyle = '-',label=f"I={I}, C={C}")
    ax7.plot(y, GomIL, linestyle = '-',label=f"I={I}, C={C}")
    ax8.plot(y, AngIL, linestyle = '-',label=f"I={I}, C={C}")

    ax9.plot( y,logTCellL,  linestyle = '-',label=f"I={I}, C={C}")
    ax10.plot(y, expTCellL, linestyle = '-',label=f"I={I}, C={C}")
    ax11.plot(y, gomTCellL, linestyle = '-',label=f"I={I}, C={C}")
    ax12.plot(y, angTCellL, linestyle = '-',label=f"I={I}, C={C}")

    ax13.plot( y,LogCL,  linestyle = '-',label=f"I={I}, C={C}")
    ax14.plot(y, ExpCL, linestyle = '-',label=f"I={I}, C={C}")
    ax15.plot(y, GomCL, linestyle = '-',label=f"I={I}, C={C}")
    ax16.plot(y, AngCL, linestyle = '-',label=f"I={I}, C={C}")

ax1.set_title('Logistic')
ax2.set_title('Expo')
ax3.set_title('Gompertz')
ax4.set_title('Angiogenesis')
ax5.set_title('IC(Logistic)')
ax6.set_title('IC(Exponential)')
ax7.set_title('IC(Gompertz)')
ax8.set_title('IC(Angiogenesis)')
ax9.set_title('T Cell Logistic')
ax10.set_title('T Cell Expo')
ax11.set_title('T Cell Gompertz')
ax12.set_title('T Cell Angiogenesis')
ax13.set_title('RadioActivity')
ax14.set_title('RadioActivity')
ax15.set_title('RadioActivity')
ax16.set_title('RadioActivity')


fig.tight_layout()

"""# Stochasticity and Treatment Success Simualtion for range of parameter values"""

# run simulation of the model for stochasticity

def simulationStoch(S,I,T,C,r,Smax,d1,d2,d3,d4,d5,b1,b2,o1,o2,o3,o4,k1,k2,T50, time, step):
  r = r
  rLog = r
  rExp = r
  rGom = r
  rAng = r

  tumorSizeLogList = []
  tumorSizeExpList = []
  tumorSizeGomList = []
  tumorSizeAngList = []

  tCellLogList = []
  tCellExpList = []
  tCellGomList = []
  tCellAngList = []

  iLogList = []
  iExpList = []
  iGomList = []
  iAngList = []

  cLogList = []
  cExpList = []
  cGomList = []
  cAngList = []

  initTumorLogSize = S
  initTumorExpSize = S
  initTumorGomSize = S
  initTumorAngSize = S

  initTCellLog = T
  initTCellExp = T
  initTCellGom = T
  initTCellAng = T

  initImmunoAgentLog = I
  initImmunoAgentExp = I
  initImmunoAgentGom = I
  initImmunoAgentAng = I

  initRadioActivityLog = C
  initRadioActivityExp = C
  initRadioActivityGom = C
  initRadioActivityAng = C

  tumorSizeLogList.append(initTumorLogSize)
  tumorSizeExpList.append(initTumorExpSize)
  tumorSizeGomList.append(initTumorGomSize)
  tumorSizeAngList.append(initTumorAngSize)

  iLogList.append(initImmunoAgentLog )
  iExpList.append(initImmunoAgentExp)
  iGomList.append(initImmunoAgentGom)
  iAngList.append(initImmunoAgentAng)

  tCellLogList.append(initTCellLog)
  tCellExpList.append(initTCellExp)
  tCellGomList.append(initTCellGom)
  tCellAngList.append(initTCellAng)

  cLogList.append(initRadioActivityLog)
  cExpList.append(initRadioActivityExp)
  cGomList.append(initRadioActivityGom)
  cAngList.append(initRadioActivityAng)

  while time > 0:
    growthLog = logTumorStoch(initTumorLogSize, Smax, rLog)
    growthExp = expTumorStoch(initTumorExpSize ,rExp )
    growthGom = gompertzTumorStoch(initTumorGomSize, rGom)
    E = dEdtStoch(0.2, initTumorAngSize)
    growthAng = angioTumorStoch(initTumorAngSize, rAng,E)

    deathLog = tumorDeath(initTumorLogSize,initTCellLog,initImmunoAgentLog,d1,d2,d3,T50,k1)
    deathExp = tumorDeath(initTumorExpSize,initTCellExp,initImmunoAgentExp,d1,d2,d3,T50,k1)
    deathGom = tumorDeath(initTumorGomSize,initTCellGom,initImmunoAgentGom,d1,d2,d3,T50,k1)
    deathAng = tumorDeath(initTumorAngSize,initTCellAng,initImmunoAgentAng,d1,d2,d3,T50,k1)

    newTumorSizeLog = initTumorLogSize + (growthLog - deathLog)*step
    newTumorSizeExp = initTumorExpSize + (growthExp - deathExp)*step
    newTumorSizeGom = initTumorGomSize + (growthGom -deathGom)*step
    newTumorSizeAng = initTumorAngSize + (growthAng -deathAng)*step

    tCellActivationLog = activation(initTumorLogSize,initTCellLog,initImmunoAgentLog,initRadioActivityLog,b1,b2,o1,deathLog,k2)
    tCellInactivationLog = inactivation(initTumorLogSize,initTCellLog,initRadioActivityLog,o2,d1, d4,d5,T50)
    newTCellLog = initTCellLog + (tCellActivationLog - tCellInactivationLog)*step

    tCellActivationExp = activation(initTumorExpSize,initTCellExp,initImmunoAgentExp,initRadioActivityExp,b1,b2,o1,deathExp,k2)
    tCellInactivationExp = inactivation(initTumorExpSize,initTCellExp,initRadioActivityExp,o2,d1, d4,d5,T50)
    newTCellExp = initTCellExp + (tCellActivationExp - tCellInactivationExp)*step

    tCellActivationGom = activation(initTumorGomSize,initTCellGom,initImmunoAgentGom,initRadioActivityGom,b1,b2,o1,deathGom,k2)
    tCellInactivationGom = inactivation(initTumorGomSize,initTCellGom,initRadioActivityGom,o2,d1, d4,d5,T50)
    newTCellGom = initTCellGom + (tCellActivationGom - tCellInactivationGom)*step

    tCellActivationAng = activation(initTumorAngSize,initTCellAng,initImmunoAgentAng,initRadioActivityAng,b1,b2,o1,deathAng,k2)
    tCellInactivationAng = inactivation(initTumorAngSize,initTCellAng,initRadioActivityAng,o2,d1, d4,d5,T50)
    newTCellAng = initTCellAng + (tCellActivationAng - tCellInactivationAng)*step

    newImmunoAgentLog = initImmunoAgentLog - immunotherapy(initTumorLogSize, initImmunoAgentLog, initRadioActivityLog, o3, b2, k2)*step
    newRadioActivityLog = initRadioActivityLog - radiotherapy(initTumorLogSize,initRadioActivityLog,o4, d2)*step

    newImmunoAgentExp = initImmunoAgentExp - immunotherapy(initTumorExpSize, initImmunoAgentExp, initRadioActivityExp, o3, b2, k2)*step
    newRadioActivityExp = initRadioActivityExp - radiotherapy(initTumorExpSize,initRadioActivityExp,o4, d2)*step

    newImmunoAgentGom = initImmunoAgentGom - immunotherapy(initTumorGomSize, initImmunoAgentGom, initRadioActivityGom, o3, b2, k2)*step
    newRadioActivityGom = initRadioActivityGom - radiotherapy(initTumorGomSize,initRadioActivityGom,o4, d2)*step

    newImmunoAgentAng = initImmunoAgentAng - immunotherapy(initTumorAngSize, initImmunoAgentAng, initRadioActivityAng, o3, b2, k2)*step
    newRadioActivityAng = initRadioActivityAng - radiotherapy(initTumorAngSize,initRadioActivityAng,o4, d2)*step

    initTumorLogSize = newTumorSizeLog
    initTumorExpSize = newTumorSizeExp
    initTumorGomSize = newTumorSizeGom
    initTumorAngSize = newTumorSizeAng

    initTCellLog = newTCellLog
    initTCellExp = newTCellExp
    initTCellGom = newTCellGom
    initTCellAng = newTCellAng


    initImmunoAgentLog = newImmunoAgentLog
    initImmunoAgentExp = newImmunoAgentExp
    initImmunoAgentGom = newImmunoAgentGom
    initImmunoAgentAng = newImmunoAgentAng

    initRadioActivityLog = newRadioActivityLog
    initRadioActivityExp = newRadioActivityExp
    initRadioActivityGom = newRadioActivityGom
    initRadioActivityAng = newRadioActivityAng

    tumorSizeLogList.append(initTumorLogSize)
    tumorSizeExpList.append(initTumorExpSize)
    tumorSizeGomList.append(initTumorGomSize)
    tumorSizeAngList.append(initTumorAngSize)


    tCellLogList.append(initTCellLog)
    tCellExpList.append(initTCellExp)
    tCellGomList.append(initTCellGom)
    tCellAngList.append(initTCellAng)

    iLogList.append(initImmunoAgentLog )
    iExpList.append(initImmunoAgentExp)
    iGomList.append(initImmunoAgentGom)
    iAngList.append(initImmunoAgentAng)

    cLogList.append(initRadioActivityLog)
    cExpList.append(initRadioActivityExp)
    cGomList.append(initRadioActivityGom)
    cAngList.append(initRadioActivityAng)



    time -= step

  return (tumorSizeLogList,tumorSizeExpList,tumorSizeGomList,tumorSizeAngList ,tCellLogList,tCellExpList,tCellGomList, tCellAngList ,iLogList,iExpList, iGomList,iAngList, cLogList, cExpList,cGomList, cAngList)

"""# Parameter analysis , treatment success for logistic"""

def simulationStochLog(S,I,T,C,r,Smax,d1,d2,d3,d4,d5,b1,b2,o1,o2,o3,o4,k1,k2,T50, time, step):



  r = r
  rLog = r
  count = 0
  trial = 0

  while count < 1:
    time = time
    tumorSizeLogList = []


    tCellLogList = []

    iLogList = []


    cLogList = []


    initTumorLogSize = S


    initTCellLog = T


    initImmunoAgentLog = I

    initRadioActivityLog = C


    tumorSizeLogList.append(initTumorLogSize)


    iLogList.append(initImmunoAgentLog )

    tCellLogList.append(initTCellLog)

    cLogList.append(initRadioActivityLog)


    while initTumorLogSize > 0.00001 and time > 0:
      growthLog = logTumorStoch(initTumorLogSize, Smax, rLog)


      deathLog = tumorDeath(initTumorLogSize,initTCellLog,initImmunoAgentLog,d1,d2,d3,T50,k1)


      newTumorSizeLog = initTumorLogSize + (growthLog - deathLog)*step


      tCellActivationLog = activation(initTumorLogSize,initTCellLog,initImmunoAgentLog,initRadioActivityLog,b1,b2,o1,deathLog,k2)
      tCellInactivationLog = inactivation(initTumorLogSize,initTCellLog,initRadioActivityLog,o2,d1, d4,d5,T50)
      newTCellLog = initTCellLog + (tCellActivationLog - tCellInactivationLog)*step

      newImmunoAgentLog = initImmunoAgentLog - immunotherapy(initTumorLogSize, initImmunoAgentLog, initRadioActivityLog, o3, b2, k2)*step
      newRadioActivityLog = initRadioActivityLog - radiotherapy(initTumorLogSize,initRadioActivityLog,o4, d2)*step


      initTumorLogSize = newTumorSizeLog

      initTCellLog = newTCellLog


      initImmunoAgentLog = newImmunoAgentLog


      initRadioActivityLog = newRadioActivityLog


      tumorSizeLogList.append(initTumorLogSize)

      tCellLogList.append(initTCellLog)


      iLogList.append(initImmunoAgentLog )

      cLogList.append(initRadioActivityLog)

      time -= step

      tumorDied = tumorSizeLogList[-1]
      if tumorDied < 0 :
        count += 1
        trial += 1
      else:
        trial += 1






  return (count/trial,tumorSizeLogList,tCellLogList,iLogList ,cLogList)



"""# Parameter analysis , treatment success for exponential"""

# parameter analysis , treatment success for exponential

def simulationStochExp(S,I,T,C,r,Smax,d1,d2,d3,d4,d5,b1,b2,o1,o2,o3,o4,k1,k2,T50, time, step):



  r = r
  rLog = r
  count = 0
  trial = 0

  while count < 1:
    time = time
    tumorSizeLogList = []


    tCellLogList = []

    iLogList = []


    cLogList = []


    initTumorLogSize = S


    initTCellLog = T


    initImmunoAgentLog = I

    initRadioActivityLog = C


    tumorSizeLogList.append(initTumorLogSize)


    iLogList.append(initImmunoAgentLog )

    tCellLogList.append(initTCellLog)

    cLogList.append(initRadioActivityLog)


    while initTumorLogSize > 0.00001 and time > 0:
      growthLog = expTumor(initTumorLogSize, Smax)


      deathLog = tumorDeath(initTumorLogSize,initTCellLog,initImmunoAgentLog,d1,d2,d3,T50,k1)


      newTumorSizeLog = initTumorLogSize + (growthLog - deathLog)*step


      tCellActivationLog = activation(initTumorLogSize,initTCellLog,initImmunoAgentLog,initRadioActivityLog,b1,b2,o1,deathLog,k2)
      tCellInactivationLog = inactivation(initTumorLogSize,initTCellLog,initRadioActivityLog,o2,d1, d4,d5,T50)
      newTCellLog = initTCellLog + (tCellActivationLog - tCellInactivationLog)*step

      newImmunoAgentLog = initImmunoAgentLog - immunotherapy(initTumorLogSize, initImmunoAgentLog, initRadioActivityLog, o3, b2, k2)*step
      newRadioActivityLog = initRadioActivityLog - radiotherapy(initTumorLogSize,initRadioActivityLog,o4, d2)*step


      initTumorLogSize = newTumorSizeLog

      initTCellLog = newTCellLog


      initImmunoAgentLog = newImmunoAgentLog


      initRadioActivityLog = newRadioActivityLog


      tumorSizeLogList.append(initTumorLogSize)

      tCellLogList.append(initTCellLog)


      iLogList.append(initImmunoAgentLog )

      cLogList.append(initRadioActivityLog)

      time -= step

      tumorDied = tumorSizeLogList[-1]
      if tumorDied < 0 :
        count += 1
        trial += 1
      else:
        trial += 1






  return (count/trial,tumorSizeLogList,tCellLogList,iLogList ,cLogList)

"""# Parameter analysis , treatment success for gompertz"""

# parameter analysis , treatment success for gompertz

def simulationStochGom(S,I,T,C,r,Smax,d1,d2,d3,d4,d5,b1,b2,o1,o2,o3,o4,k1,k2,T50, time, step):



  r = r
  rLog = r
  count = 0
  trial = 0

  while count < 1:
    time = time
    tumorSizeLogList = []


    tCellLogList = []

    iLogList = []


    cLogList = []


    initTumorLogSize = S


    initTCellLog = T


    initImmunoAgentLog = I

    initRadioActivityLog = C


    tumorSizeLogList.append(initTumorLogSize)


    iLogList.append(initImmunoAgentLog )

    tCellLogList.append(initTCellLog)

    cLogList.append(initRadioActivityLog)


    while initTumorLogSize > 0.00001 and time > 0:
      growthLog = gompertzTumorStoch(initTumorLogSize, Smax)


      deathLog = tumorDeath(initTumorLogSize,initTCellLog,initImmunoAgentLog,d1,d2,d3,T50,k1)


      newTumorSizeLog = initTumorLogSize + (growthLog - deathLog)*step


      tCellActivationLog = activation(initTumorLogSize,initTCellLog,initImmunoAgentLog,initRadioActivityLog,b1,b2,o1,deathLog,k2)
      tCellInactivationLog = inactivation(initTumorLogSize,initTCellLog,initRadioActivityLog,o2,d1, d4,d5,T50)
      newTCellLog = initTCellLog + (tCellActivationLog - tCellInactivationLog)*step

      newImmunoAgentLog = initImmunoAgentLog - immunotherapy(initTumorLogSize, initImmunoAgentLog, initRadioActivityLog, o3, b2, k2)*step
      newRadioActivityLog = initRadioActivityLog - radiotherapy(initTumorLogSize,initRadioActivityLog,o4, d2)*step


      initTumorLogSize = newTumorSizeLog

      initTCellLog = newTCellLog


      initImmunoAgentLog = newImmunoAgentLog


      initRadioActivityLog = newRadioActivityLog


      tumorSizeLogList.append(initTumorLogSize)

      tCellLogList.append(initTCellLog)


      iLogList.append(initImmunoAgentLog )

      cLogList.append(initRadioActivityLog)

      time -= step

      tumorDied = tumorSizeLogList[-1]
      if tumorDied < 0 :
        count += 1
        trial += 1
      else:
        trial += 1






  return (count/trial,tumorSizeLogList,tCellLogList,iLogList ,cLogList)

"""# Parameter analysis , treatment success for angiogenesis"""

def simulationStochAng(S,I,T,C,r,Smax,d1,d2,d3,d4,d5,b1,b2,o1,o2,o3,o4,k1,k2,T50, time, step):



  r = r
  rLog = r
  count = 0
  trial = 0

  while count < 1:
    time = time
    tumorSizeLogList = []


    tCellLogList = []

    iLogList = []


    cLogList = []


    initTumorLogSize = S


    initTCellLog = T


    initImmunoAgentLog = I

    initRadioActivityLog = C


    tumorSizeLogList.append(initTumorLogSize)


    iLogList.append(initImmunoAgentLog )

    tCellLogList.append(initTCellLog)

    cLogList.append(initRadioActivityLog)


    while initTumorLogSize > 0.00001 and time > 0:
      E = dEdt(0.2, initTumorLogSize)
      growthLog = angioTumorStoch(initTumorLogSize, rLog, E)



      deathLog = tumorDeath(initTumorLogSize,initTCellLog,initImmunoAgentLog,d1,d2,d3,T50,k1)


      newTumorSizeLog = initTumorLogSize + (growthLog - deathLog)*step


      tCellActivationLog = activation(initTumorLogSize,initTCellLog,initImmunoAgentLog,initRadioActivityLog,b1,b2,o1,deathLog,k2)
      tCellInactivationLog = inactivation(initTumorLogSize,initTCellLog,initRadioActivityLog,o2,d1, d4,d5,T50)
      newTCellLog = initTCellLog + (tCellActivationLog - tCellInactivationLog)*step

      newImmunoAgentLog = initImmunoAgentLog - immunotherapy(initTumorLogSize, initImmunoAgentLog, initRadioActivityLog, o3, b2, k2)*step
      newRadioActivityLog = initRadioActivityLog - radiotherapy(initTumorLogSize,initRadioActivityLog,o4, d2)*step


      initTumorLogSize = newTumorSizeLog

      initTCellLog = newTCellLog


      initImmunoAgentLog = newImmunoAgentLog


      initRadioActivityLog = newRadioActivityLog


      tumorSizeLogList.append(initTumorLogSize)

      tCellLogList.append(initTCellLog)


      iLogList.append(initImmunoAgentLog )

      cLogList.append(initRadioActivityLog)

      time -= step

      tumorDied = tumorSizeLogList[-1]
      if tumorDied < 0 :
        count += 1
        trial += 1
      else:
        trial += 1






  return (count/trial,tumorSizeLogList,tCellLogList,iLogList ,cLogList)

"""# Get probability of all models growth over a range of d1 values"""

S = 9
I = 2
T = 2
C = 1
r = 0.2
time = 5
step = 0.05
logisticSuccessd1 = []
exponentialSuccessd1 = []
gompertzSuccessd1 = []
angioSuccessd1 = []
for i in np.arange(0.1,25,0.5):
  probLog, listTumorLog, tCellLog, immLog, radioLog = simulationStochLog(S,I,T,C,r,Smax,i,d2,d3,d4,d5,b1,b2,o1,o2,o3,o4,k1,k2,T50, time, step)

  probExp, listTumorExp, tCellExp, immExp, radioExp = simulationStochExp(S,I,T,C,r,Smax,i,d2,d3,d4,d5,b1,b2,o1,o2,o3,o4,k1,k2,T50, time, step)
  probGom, listTumorGom, tCellGom, immGom, radioGom = simulationStochGom(S,I,T,C,r,Smax,i,d2,d3,d4,d5,b1,b2,o1,o2,o3,o4,k1,k2,T50, time, step)
  probAng, listTumorAng, tCellAng, immAng, radioAng = simulationStochAng(S,I,T,C,r,Smax,i,d2,d3,d4,d5,b1,b2,o1,o2,o3,o4,k1,k2,T50, time, step)

  logisticSuccessd1.append(probLog)

  exponentialSuccessd1.append(probExp)

  gompertzSuccessd1.append(probGom)
  angioSuccessd1.append(probAng)
print(logisticSuccessd1)
print(exponentialSuccessd1)
print(gompertzSuccessd1)
print(angioSuccessd1)

"""# Plot histogram for paramter d1 sensitivity analysis"""

mainList = [logisticSuccessd1, exponentialSuccessd1,gompertzSuccessd1,angioSuccessd1]

plt.figure(figsize=(10, 10))

x = [i for i in np.arange(0.1,25,0.5)]
print(x)
print(len(logisticSuccessd1))
plt.scatter( x,logisticSuccessd1,color='purple', marker = 'o')
plt.plot(x,logisticSuccessd1,color='purple', markersize = 0.1)
plt.scatter( x,exponentialSuccessd1,color='black', marker = 'o')
plt.plot( x,exponentialSuccessd1,color='black', markersize = 0.1)
plt.scatter( x,gompertzSuccessd1,color='pink', marker = 'o')
plt.plot(x,gompertzSuccessd1,color='pink', markersize = 0.1)
plt.scatter( x,angioSuccessd1,color='green', marker = 'o')
plt.plot(x,angioSuccessd1,color='green', markersize = 0.1)

p1 = mlines.Line2D([], [], color='purple', marker='o', linestyle='-',
                          markersize=10, label='Logistic Success')
p2 = mlines.Line2D([], [], color='black', marker='o', linestyle='-',
                          markersize=10, label='Exponential Success')
p3 = mlines.Line2D([], [], color='pink', marker='o', linestyle='-',
                          markersize=10, label='Gompertz Success')
p4 = mlines.Line2D([], [], color='green', marker='o', linestyle='-',
                          markersize=10, label='Angiogenesis Success')
plt.legend(handles=[p1,p2,p3,p4])

plt.xlabel("d1 Values",size =15)
plt.ylabel("Probability of Success",size=15)
plt.title("Treatment Success",size=15)



plt.show()

"""# Get probability of all models growth over a range of b1 values"""

S = 9
I = 2
T = 2
C = 1
r = 0.2
time = 5
step = 0.05
logisticSuccessb1 = []
exponentialSuccessb1 = []
gompertzSuccessb1 = []
angioSuccessb1 = []
for i in np.arange(0.1,25,0.5):
  probLog, listTumorLog, tCellLog, immLog, radioLog = simulationStochLog(S,I,T,C,r,Smax,d1,d2,d3,d4,d5,i,b2,o1,o2,o3,o4,k1,k2,T50, time, step)

  probExp, listTumorExp, tCellExp, immExp, radioExp = simulationStochExp(S,I,T,C,r,Smax,d1,d2,d3,d4,d5,i,b2,o1,o2,o3,o4,k1,k2,T50, time, step)
  probGom, listTumorGom, tCellGom, immGom, radioGom = simulationStochGom(S,I,T,C,r,Smax,d1,d2,d3,d4,d5,i,b2,o1,o2,o3,o4,k1,k2,T50, time, step)
  probAng, listTumorAng, tCellAng, immAng, radioAng = simulationStochAng(S,I,T,C,r,Smax,d1,d2,d3,d4,d5,i,b2,o1,o2,o3,o4,k1,k2,T50, time, step)

  logisticSuccessb1.append(probLog)

  exponentialSuccessb1.append(probExp)

  gompertzSuccessb1.append(probGom)
  angioSuccessb1.append(probAng)
print(logisticSuccessb1)
print(exponentialSuccessb1)
print(gompertzSuccessb1)
print(angioSuccessb1)

"""# Plot histogram for b1 sensitivity analysis"""

mainList = [logisticSuccessb1, exponentialSuccessb1,gompertzSuccessb1,angioSuccessb1]

plt.figure(figsize=(10, 10))

x = [i for i in np.arange(0.1,25,0.5)]
print(x)
print(len(logisticSuccessb1))
plt.scatter( x,logisticSuccessb1,color='purple', marker = 'o')
plt.plot(x,logisticSuccessb1,color='purple', markersize = 0.1)
plt.scatter( x,exponentialSuccessb1,color='black', marker = 'o')
plt.plot( x,exponentialSuccessb1,color='black', markersize = 0.1)
plt.scatter( x,gompertzSuccessb1,color='pink', marker = 'o')
plt.plot(x,gompertzSuccessb1,color='pink', markersize = 0.1)
plt.scatter( x,angioSuccessb1,color='green', marker = 'o')
plt.plot(x,angioSuccessb1,color='green', markersize = 0.1)

p1 = mlines.Line2D([], [], color='purple', marker='o', linestyle='-',
                          markersize=10, label='Logistic Success')
p2 = mlines.Line2D([], [], color='black', marker='o', linestyle='-',
                          markersize=10, label='Exponential Success')
p3 = mlines.Line2D([], [], color='pink', marker='o', linestyle='-',
                          markersize=10, label='Gompertz Success')
p4 = mlines.Line2D([], [], color='green', marker='o', linestyle='-',
                          markersize=10, label='Angiogenesis Success')
plt.legend(handles=[p1,p2,p3,p4])

plt.xlabel("b1 Values",size =15)
plt.ylabel("Probability of Success",size=15)
plt.title("Treatment Success",size=15)



plt.show()

"""# Get probability of all models growth over a range of b2 values"""

S = 9
I = 2
T = 2
C = 1
r = 0.2
time = 5
step = 0.05
logisticSuccessb2 = []
exponentialSuccessb2 = []
gompertzSuccessb2 = []
angioSuccessb2 = []
for i in np.arange(0.1,25,0.5):
  probLog, listTumorLog, tCellLog, immLog, radioLog = simulationStochLog(S,I,T,C,r,Smax,d1,d2,d3,d4,d5,b1,i,o1,o2,o3,o4,k1,k2,T50, time, step)

  probExp, listTumorExp, tCellExp, immExp, radioExp = simulationStochExp(S,I,T,C,r,Smax,d1,d2,d3,d4,d5,b1,i,o1,o2,o3,o4,k1,k2,T50, time, step)
  probGom, listTumorGom, tCellGom, immGom, radioGom = simulationStochGom(S,I,T,C,r,Smax,d1,d2,d3,d4,d5,b1,i,o1,o2,o3,o4,k1,k2,T50, time, step)
  probAng, listTumorAng, tCellAng, immAng, radioAng = simulationStochAng(S,I,T,C,r,Smax,d1,d2,d3,d4,d5,b1,i,o1,o2,o3,o4,k1,k2,T50, time, step)

  logisticSuccessb2.append(probLog)

  exponentialSuccessb2.append(probExp)

  gompertzSuccessb2.append(probGom)
  angioSuccessb2.append(probAng)
print(logisticSuccessb2)
print(exponentialSuccessb2)
print(gompertzSuccessb2)
print(angioSuccessb2)

"""# Plot histogram for b2 sensitivity analysis"""

mainList = [logisticSuccessb2, exponentialSuccessb2,gompertzSuccessb2,angioSuccessb2]

plt.figure(figsize=(10, 10))

x = [i for i in np.arange(0.1,25,0.5)]
print(x)
print(len(logisticSuccessb2))
plt.scatter( x,logisticSuccessb2,color='purple', marker = 'o')
plt.plot(x,logisticSuccessb2,color='purple', markersize = 0.1)
plt.scatter( x,exponentialSuccessb2,color='black', marker = 'o')
plt.plot( x,exponentialSuccessb2,color='black', markersize = 0.1)
plt.scatter( x,gompertzSuccessb2,color='pink', marker = 'o')
plt.plot(x,gompertzSuccessb2,color='pink', markersize = 0.1)
plt.scatter( x,angioSuccessb2,color='green', marker = 'o')
plt.plot(x,angioSuccessb2,color='green', markersize = 0.1)

p1 = mlines.Line2D([], [], color='purple', marker='o', linestyle='-',
                          markersize=10, label='Logistic Success')
p2 = mlines.Line2D([], [], color='black', marker='o', linestyle='-',
                          markersize=10, label='Exponential Success')
p3 = mlines.Line2D([], [], color='pink', marker='o', linestyle='-',
                          markersize=10, label='Gompertz Success')
p4 = mlines.Line2D([], [], color='green', marker='o', linestyle='-',
                          markersize=10, label='Angiogenesis Success')
plt.legend(handles=[p1,p2,p3,p4])

plt.xlabel("b2 Values",size =15)
plt.ylabel("Probability of Success",size=15)
plt.title("Treatment Success",size=15)



plt.show()

"""# Get probability of logistic growth over a range of o1 values"""

S = 9
I = 2
T = 2
C = 1
r = 0.2
time = 5
step = 0.05
logisticSuccesso1 = []
exponentialSuccesso1 = []
gompertzSuccesso1 = []
angioSuccesso1 = []
for i in np.arange(0.1,25,0.5):
  probLog, listTumorLog, tCellLog, immLog, radioLog = simulationStochLog(S,I,T,C,r,Smax,d1,d2,d3,d4,d5,b1,b2,i,o2,o3,o4,k1,k2,T50, time, step)

  probExp, listTumorExp, tCellExp, immExp, radioExp = simulationStochExp(S,I,T,C,r,Smax,d1,d2,d3,d4,d5,b1,b2,i,o2,o3,o4,k1,k2,T50, time, step)
  probGom, listTumorGom, tCellGom, immGom, radioGom = simulationStochGom(S,I,T,C,r,Smax,d1,d2,d3,d4,d5,b1,b2,i,o2,o3,o4,k1,k2,T50, time, step)
  probAng, listTumorAng, tCellAng, immAng, radioAng = simulationStochAng(S,I,T,C,r,Smax,d1,d2,d3,d4,d5,b1,b2,i,o2,o3,o4,k1,k2,T50, time, step)

  logisticSuccesso1.append(probLog)

  exponentialSuccesso1.append(probExp)

  gompertzSuccesso1.append(probGom)
  angioSuccesso1.append(probAng)
print(logisticSuccesso1)
print(exponentialSuccesso1)
print(gompertzSuccesso1)
print(angioSuccesso1)

"""# Plot histogram for o1 sensitivity analysis"""

mainList = [logisticSuccesso1, exponentialSuccesso1,gompertzSuccesso1,angioSuccesso1]

plt.figure(figsize=(10, 10))

x = [i for i in np.arange(0.1,25,0.5)]
print(x)
print(len(logisticSuccesso1))
plt.scatter( x,logisticSuccesso1,color='purple', marker = 'o')
plt.plot(x,logisticSuccesso1,color='purple', markersize = 0.1)
plt.scatter( x,exponentialSuccesso1,color='black', marker = 'o')
plt.plot( x,exponentialSuccesso1,color='black', markersize = 0.1)
plt.scatter( x,gompertzSuccesso1,color='pink', marker = 'o')
plt.plot(x,gompertzSuccesso1,color='pink', markersize = 0.1)
plt.scatter( x,angioSuccesso1,color='green', marker = 'o')
plt.plot(x,angioSuccesso1,color='green', markersize = 0.1)

p1 = mlines.Line2D([], [], color='purple', marker='o', linestyle='-',
                          markersize=10, label='Logistic Success')
p2 = mlines.Line2D([], [], color='black', marker='o', linestyle='-',
                          markersize=10, label='Exponential Success')
p3 = mlines.Line2D([], [], color='pink', marker='o', linestyle='-',
                          markersize=10, label='Gompertz Success')
p4 = mlines.Line2D([], [], color='green', marker='o', linestyle='-',
                          markersize=10, label='Angiogenesis Success')
plt.legend(handles=[p1,p2,p3,p4])

plt.xlabel("o1 Values",size =15)
plt.ylabel("Probability of Success",size=15)
plt.title("Treatment Success",size=15)



plt.show()

"""# Creating a subplots for the graphs from d1, b1, b2, o1"""

fig, ((ax1, ax2,ax3,ax4), (ax5,ax6,ax7,ax8),(ax9,ax10,ax11,ax12), (ax13, ax14,ax15,ax16))= plt.subplots(4, 4)


y = [i for i in range(len(logisticSuccesso1))]

ax1.plot(y, logisticSuccessd1,  linestyle = '-')
ax2.plot(y, exponentialSuccessd1, linestyle = '-',)
ax3.plot(y, gompertzSuccessd1, linestyle = '-')
ax4.plot(y, angioSuccessd1, linestyle = '-')


ax5.plot( y,logisticSuccessb1,  linestyle = '-')
ax6.plot(y, exponentialSuccessb1, linestyle = '-')
ax7.plot(y, gompertzSuccessb1, linestyle = '-')
ax8.plot(y, angioSuccessb1, linestyle = '-')

ax9.plot( y,logisticSuccessb2,  linestyle = '-')
ax10.plot(y, exponentialSuccessb2, linestyle = '-')
ax11.plot(y, gompertzSuccessb2, linestyle = '-')
ax12.plot(y, angioSuccessb2, linestyle = '-')


ax13.plot(y, logisticSuccesso1, linestyle = '-')
ax14.plot(y, exponentialSuccesso1, linestyle = '-')
ax15.plot(y, gompertzSuccesso1, linestyle = '-',)
ax16.plot(y, angioSuccesso1, linestyle = '-')


ax1.set_title('Logistic d1')
ax2.set_title('Exponential d1')
ax3.set_title('Gompertz d1')
ax4.set_title('Angiogenesis d1')
ax5.set_title('Logistic b1')
ax6.set_title('Exponential b1')
ax7.set_title('Gompertz b1')
ax8.set_title('Angiogenesis b1')
ax9.set_title('Logistic b2')
ax10.set_title('Exponential b2')
ax11.set_title('Gompertz b2')
ax12.set_title('Angiogenesis b2')
ax13.set_title('Logistic o1')
ax14.set_title('Exponential o1')
ax15.set_title('Gompertz o1')
ax16.set_title('Angiogenesis o1')



fig.tight_layout()

"""# Analyze the Stability of the System"""

# The evalutation of the Jacobian matrix takes place using the values below

Shat = 2949.5
That = 0.0224
Ihat = 0
Chat = 0

# The evaluation of the Jacobian matrix takes place using additional values below

a1 = Smax*(That*(That*k1*(d1-r) - r*(T50*k1 + 1) + d1 + d3) + T50*(d3 - r)) + 2*Shat*r*(That*(k1*(That + T50) + 1) + T50)
a2 = Shat*(That*(That*k1*(T50*d1*k1 - d3) + 2*T50*k1*(d1 - d3)) + T50*(d1 - T50*d3*k1))
a3 = That**3*d1*k1*o1 + That**2*(k1*(b1 - d1*o2) + o1*(d1 + d3)) + That*(T50*(b1*k1 + d3*o1) - d1*o2 + b1) + T50*b1
a4 = Shat*(That**4*d1*k1**2*o1 + 2*That**3*d1*k1*o1*(T50*k1 + 1) + That**2*(T50*d1*k1*(4*o1 - k1*o2) + o1*(d1 + d3)) + 2*That*T50*(d1*(o1 - k1*o2) + d3*o1) + T50*(T50*d3*o1 - d1*o2)) - d5*(That**4*k1**2 + 2*That**3*k1*(T50*k1 + 1)+ That**2*(T50**2*k1**2 + 4*T50*k1 + 1) + 2*That*T50*(T50*k1 + 1) + T50**2)
a5 = Shat**2*k2*(That**3*d1*k1**o1 + That**2*(b1*k1 + o1*(d1 + d3)) + That*(T50*(b1*k1 + d3*o1) + b1) + T50*b1) - Shat*o1*(That**3*d2*k1 + That**2*(T50*d2*k1 + d2) + That*T50*d2) + That**3*d4*k1 + That**2*(T50*d4*k1 + d4) + That*T50*d4

j11 = -a1/(Smax*(T50+That)*(That*k1+1))
j12 = -a2/((T50 + That)**2*(That*k1+1)**2)
j13 = 0
j14 = -d2*Shat

j21 = a3/((T50 + That)*(That*k1 + 1))
j22 = a4/((T50 + That)**2*(That*k1 + 1)**2)
j23 = b2*Shat
j24 = -a5/((T50 + That)*(That*k1 +1))

j31 = 0
j32 = 0
j33 = -o3*b2
j34 = 0

j41 = 0
j42 = 0
j43 = 0
j44 = -o4*d2*Shat


jacobianMatrix = np.array([[j11, j12, j13, j14],[j21, j22, j23, j24],[j31,j32,j33,j34],[j41,j42,j43,j44]])

# Solving the Jacobian matrix for eigenvalues

eigen1, matrix2 = np.linalg.eig(jacobianMatrix)
print(eigen1)
print(matrix2)

"""Above , we see that the igenvalues are all real and negative which indicates that the system is stable."""



"""## Monte Carlo Simulations"""

# to run 200 simulations and plot for all 4 models
# using a small window range for parameters d1, b1, b2, o1 and Immunotherapy range

import random
# Simulating Graphs for varying I

step = 0.01
time = 5
S = 9
T = 0
# I = 1
C = 0
# d1 = 1
d2 = 0.07
d3 = 0

fig, ((ax1),(ax2),(ax3),(ax4))= plt.subplots(4, 1)

for i in range(1, 200, 1): # for each simulation # total 100 rounds
  d1 = random.randint(10, 200)/100
  b1 = random.randint(10, 200)/100
  b2 = random.randint(10, 200)/100
  o1 = random.randint(10, 200)/100   # any number from 0.1 to 2
  I = random.randrange(5, 6, 1)

  logTumorL, expTumorL, gomTumorL,angTumorL, logTCellL,expTCellL, gomTCellL, angTCellL,LogIL, ExpIL, GomIL,AngIL,LogCL, ExpCL, GomCL , AngCL= simulation(S,I,T,C,r,Smax,d1,d2,d3,d4,d5,b1,b2,o1,o2,o3,o4,k1,k2,T50, time, step)

  y = [i for i in range(len(logTumorL))]


  ax1.plot(y, logTumorL,  linestyle = '-')
  ax2.plot(y, expTumorL, linestyle = '-')
  ax3.plot(y, gomTumorL, linestyle = '-')
  ax4.plot(y, angTumorL, linestyle = '-')






ax1.set_title('Logistic')
ax2.set_title('Exponential')
ax3.set_title('Gompertz')
ax4.set_title('Angiogenesis')



fig.tight_layout()

import random
# Simulating Graphs for varying I for longer simulation run

step = 0.01
time = 15
S = 9
T = 0
# I = 1
C = 0
# d1 = 1
d2 = 0.07
d3 = 0

fig, ((ax1),(ax2),(ax3),(ax4))= plt.subplots(4, 1)

for i in range(1, 500, 1): # for each simulation # total 100 rounds
  d1 = random.randint(10, 200)/100
  b1 = random.randint(10, 200)/100
  b2 = random.randint(10, 200)/100
  o1 = random.randint(10, 200)/100   # any number from 0.1 to 2


  I = random.randrange(5, 6, 1)

  logTumorL, expTumorL, gomTumorL,angTumorL, logTCellL,expTCellL, gomTCellL, angTCellL,LogIL, ExpIL, GomIL,AngIL,LogCL, ExpCL, GomCL , AngCL= simulation(S,I,T,C,r,Smax,d1,d2,d3,d4,d5,b1,b2,o1,o2,o3,o4,k1,k2,T50, time, step)

  y = [i for i in range(len(logTumorL))]


  ax1.plot(y, logTumorL,  linestyle = '-')
  ax2.plot(y, expTumorL, linestyle = '-')
  ax3.plot(y, gomTumorL, linestyle = '-')
  ax4.plot(y, angTumorL, linestyle = '-')






ax1.set_title('Logistic')
ax2.set_title('Expo')
ax3.set_title('Gompertz')
ax4.set_title('Angiogenesis')



fig.tight_layout()







"""# Nullclines"""



"""Nullcline for Equation 1"""

xValues = np.linspace(0,0.03)
yValues = np.linspace(0,3000)
n1, n2 = np.meshgrid(xValues, yValues)

Equation1 = n2 + 6000*(37*n1 - 50)/(100 + n1)
Equation2 = n2 - (n1*(100 + n1)) / (3639*n1**2 - 8998*n1 + 200)

division = np.sqrt(Equation1**2 + Equation2**2)

Eqn1 = Equation1/division
Eqn2 = Equation2/division


# null cline 1
def equationForT2(number):
    list1 = []
    list1.append(0)
    for i in np.arange(0,number, 0.001):
        value = (-6000*(37*i - 50)) / (100 + i)

        list1.append(value)
    return list1[1:-1]




# add in nullclines
x = [i for i in np.arange(0.001,0.03,0.001)]

y = equationForT2(0.03)


plt.figure (figsize= [7,5])
plt.plot(x,y,marker=".",color="r")





plt.quiver(n1,n2, Eqn1, Eqn2, color = "purple", pivot = 'mid')

plt.xlabel("T")
plt.ylabel("S")
plt.title("Vector Plot For Equation 1")

"""Nullcline for Equation 2"""



xValues = np.linspace(0,0.03)
yValues = np.linspace(-1,1)
n1, n2 = np.meshgrid(xValues, yValues)

Equation1 = n2 + 6000*(37*n1 - 50)/(100 + n1)
Equation2 = n2 - (n1*(100 + n1)) / (3639*n1**2 - 8998*n1 + 200)

division = np.sqrt(Equation1**2 + Equation2**2)

Eqn1 = Equation1/division
Eqn2 = Equation2/division


# null cline 1
def equationForT(number):
    list1 = []
    list1.append(0)
    for i in np.arange(0,number, 0.001):
        value = (i**2 + 100*i)/(3639*i**2 - 8998*i + 200)

        list1.append(value)
    return list1[1:-1]

# add in nullclines
x1 = [i for i in np.arange(0.001,0.03,0.001)]
y2 = equationForT(0.03)

plt.figure (figsize= [7,5])
plt.plot(x1,y2,marker=".",color="green")




plt.quiver(n1,n2, Eqn1, Eqn2, color = "purple", pivot = 'mid')
plt.xlabel("T")
plt.ylabel("S")
plt.title("Vector Plot for Equation 2")



